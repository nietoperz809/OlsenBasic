package com.sixtyfour.basicshell;

import com.sixtyfour.Basic;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.CaretEvent;
import javax.swing.text.BadLocationException;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Created by Administrator on 1/3/2017.
 */
public class ShellFrame
{
    static final ExecutorService executor = Executors.newFixedThreadPool(10);
    private final ArrayBlockingQueue<String> fromTextArea = new ArrayBlockingQueue<>(20);
    private final ArrayBlockingQueue<String> toTextArea = new ArrayBlockingQueue<>(20);
    private JTextArea mainTextArea;
    private JPanel panel1;
    private JButton stopButton;
    private JButton clsButton;
    private JButton runButton;
    private Runner runner = null;
    private ProgramStore store = new ProgramStore();
    private int[] lastStrLen = new int[2]; // Length of last output chunk
    private int rowNum;  // line number set by caret listener
    private int colNum;   // column number "
    private JLabel caretLabel;

    /**
     * Constructor:
     * - initialize UI
     * - register event handlers
     * - start text area writer thread
     */
    private ShellFrame ()
    {
        setupUI();
        mainTextArea.addCaretListener((CaretEvent e) ->
        {
            JTextArea editArea = (JTextArea) e.getSource();
            try
            {
                int caretpos = editArea.getCaretPosition();
                rowNum = editArea.getLineOfOffset(caretpos);
                colNum = caretpos - editArea.getLineStartOffset(rowNum);
                caretLabel.setText("  " + rowNum + " - " + colNum);
            }
            catch (Exception ex)
            {
                ex.printStackTrace();
            }
        });
        mainTextArea.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyReleased (KeyEvent e)
            {
                if (e.getKeyChar() == '\n')
                {
                    //System.out.println(rowNum);
                    try
                    {
                        fromTextArea.put(getLineAt(rowNum - 1));
                    }
                    catch (InterruptedException e1)
                    {
                        e1.printStackTrace();
                    }
                }
                super.keyReleased(e);
            }
        });
        executor.execute(() ->
        {
            while (true)
            {
                try
                {
                    String s = toTextArea.take();
                    mainTextArea.append(s);
                    mainTextArea.setCaretPosition(mainTextArea.getDocument().getLength());
                }
                catch (InterruptedException e)
                {
                    e.printStackTrace();
                }
            }
        });
        stopButton.addActionListener(e ->
        {
            if (runner != null)
            {
                Basic i = runner.getOlsenBasic();
                i.runStop();
            }
        });
        runButton.addActionListener( e -> run(false));
        clsButton.addActionListener(e -> cls());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     */
    private void setupUI ()
    {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.LEFT, 2, 2));
        panel2.setBackground(Color.BLACK);
        panel2.setPreferredSize(new Dimension(600, 34));
        panel1.add(panel2, BorderLayout.SOUTH);
        stopButton = new JButton();
        stopButton.setText("Stop");
        stopButton.setPreferredSize(new Dimension(82, 30));
        stopButton.setText("STOP");
        panel2.add(stopButton);
        clsButton = new JButton();
        clsButton.setPreferredSize(new Dimension(82, 30));
        clsButton.setText("CLS");
        panel2.add(clsButton);
        runButton = new JButton();
        runButton.setPreferredSize(new Dimension(82, 30));
        runButton.setText("RUN");
        panel2.add(runButton);
        caretLabel = new JLabel();
        caretLabel.setPreferredSize(new Dimension(82, 30));
        caretLabel.setForeground(Color.pink);
        panel2.add(caretLabel);
        mainTextArea = new ShellTextComponent(this);
        mainTextArea.setCaretColor(new Color(0x7C70DA));
        //mainTextArea.setLineWrap(true);
        final JScrollPane scrollPane1 = new JScrollPane(mainTextArea);

        panel1.add(scrollPane1, BorderLayout.CENTER);
        panel1.setPreferredSize(new Dimension(600, 600));
    }

    /**
     * Return line at specified position
     *
     * @param linenum Line number
     * @return Line as String
     */
    private String getLineAt (int linenum)
    {
        try
        {
            int start = mainTextArea.getLineStartOffset(linenum);
            int end = mainTextArea.getLineEndOffset(linenum);
            return mainTextArea.getText(start, end - start);
        }
        catch (BadLocationException e)
        {
            return ("");
        }
    }

    /**
     * Wipe text area
     */
    private void cls ()
    {
        mainTextArea.setText("");
    }

    private void run (boolean sync)
    {
        runner = new Runner(store.toArray(), this);
        runner.start (sync);
    }

    /**
     * Main thread entry point
     */
    public static void main (String[] unused)
    {
        JFrame frame = new JFrame("Commodore BASIC V2");
        frame.setIconImage(ResourceLoader.getIcon());
        ShellFrame shellFrame = new ShellFrame();
        frame.setContentPane(shellFrame.panel1);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        shellFrame.putString("COMMODORE BASIC V2\n" + ProgramStore.OK);

        try  // increase GUI responsiveness
        {
            SwingUtilities.invokeAndWait(new Runnable()
            {
                public void run()
                {
                    Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
                }});
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        shellFrame.commandLoop();
    }

    /**
     * Send text to text area. Blocks thd caller if buffer is full
     *
     * @param outText
     */
    public void putString (String outText)
    {
        try
        {
            toTextArea.put(outText);
            lastStrLen[0] = lastStrLen[1];
            lastStrLen[1] = outText.length();
        }
        catch (InterruptedException e)
        {
            e.printStackTrace();
        }
    }

    public void putStringUCase (String outText)
    {
        putString (outText.toUpperCase());
    }
        /**
         * Command loop that runs in main thread
         */
    private void commandLoop ()
    {
        while (true)
        {
            String s = getString();
            String[] split = s.split(" ");
            s = s.toLowerCase();
            if (s.equals("list"))
            {
                putString(store.toString());
            }
            else if (s.equals("new"))
            {
                store.clear();
            }
            else if (s.equals("cls"))
            {
                cls();
            }
            else if (s.equals("run"))
            {
                run(true);
            }
            else if (s.equals("dir"))
            {
                dir();
            }
            else if (split[0].toLowerCase().equals("save"))
            {
                String msg = store.save(split[1]);
                putString(msg);
            }
            else if (split[0].toLowerCase().equals("load"))
            {
                String msg = store.load(split[1]);
                putString(msg);
            }
            else
            {
                try
                {
                    store.insert(s);
                }
                catch (NumberFormatException unused)
                {
                    //putString(ProgramStore.ERROR);
                    putString(Runner.runLine(s, this));
                }
            }
        }
    }

    /**
     * Get input from text area. Blocks the caller if there is none
     *
     * @return
     */
    public String getString ()
    {
        try
        {
            return fromTextArea.take().trim();
        }
        catch (InterruptedException e)
        {
            e.printStackTrace();
            return null;
        }
    }

    private void dir ()
    {
        File[] filesInFolder = new File(".").listFiles();
        for (final File fileEntry : filesInFolder)
        {
            if (fileEntry.isFile())
            {
                putStringUCase(fileEntry.getName() +
                        " -- " + fileEntry.length() + '\n');
            }
        }
    }

    public ProgramStore getStore ()
    {
        return store;
    }

    /**
     * Returns length of the output string before the last one
     * Needed by some input statements
     *
     * @return Lengh of penultimate output
     */
    int getPenultimateOutputSize ()
    {
        return lastStrLen[0];
    }

    public boolean peek ()
    {
        return fromTextArea.peek() != null;
    }
}

