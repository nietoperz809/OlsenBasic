package com.sixtyfour.basicshell;

import com.sixtyfour.Basic;

import javax.swing.*;
import javax.swing.event.CaretEvent;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.BadLocationException;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Created by Administrator on 1/3/2017.
 */
@SuppressWarnings("InfiniteLoopStatement")
public class ShellFrame
{
    static final ExecutorService executor = Executors.newFixedThreadPool(10);
    private final ArrayBlockingQueue<String> fromTextArea = new ArrayBlockingQueue<>(20);
    private final ArrayBlockingQueue<String> toTextArea = new ArrayBlockingQueue<>(20);
    private final ProgramStore store = new ProgramStore();
    private final int[] lastStrLen = new int[2]; // Length of last output chunk
    JButton runButton;
    private JTextArea mainTextArea;
    private JPanel mainPanel;
    private JButton stopButton;
    private JButton clsButton;
    private JSlider fontSlider;
    private BasicRunner basicRunner = null;
    private int rowNum;  // line number set by caret listener
    private int colNum;   // column number "
    private JLabel caretLabel;

    /**
     * Constructor:
     * - initialize UI
     * - register event handlers
     * - start text area writer thread
     */
    private ShellFrame ()
    {
        setupUI();
        fontSlider.addChangeListener(new ChangeListener()
        {
            @Override
            public void stateChanged (ChangeEvent e)
            {
                JSlider source = (JSlider) e.getSource();
                if (!source.getValueIsAdjusting())
                {
                    int fps = (int) source.getValue();
                    //System.out.println(fps);
                    Font f = mainTextArea.getFont();
                    f = f.deriveFont((float) fps);
                    mainTextArea.setFont(f);
                }
            }
        });
        mainTextArea.addCaretListener((CaretEvent e) ->
        {
            JTextArea editArea = (JTextArea) e.getSource();
            try
            {
                int caretpos = editArea.getCaretPosition();
                rowNum = editArea.getLineOfOffset(caretpos);
                colNum = caretpos - editArea.getLineStartOffset(rowNum);
                caretLabel.setText("  " + rowNum + " - " + colNum);
            }
            catch (Exception ex)
            {
                ex.printStackTrace();
            }
        });
        mainTextArea.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyReleased (KeyEvent e)
            {
                if (e.getKeyChar() == '\n')
                {
                    //System.out.println(rowNum);
                    try
                    {
                        fromTextArea.put(getLineAt(rowNum - 1));
                    }
                    catch (InterruptedException e1)
                    {
                        e1.printStackTrace();
                    }
                }
                super.keyReleased(e);
            }
        });
        executor.execute(() ->
        {
            while (true)
            {
                //Thread.yield();
                try
                {
                    String s = toTextArea.take();
                    mainTextArea.append(s);
                    //mainTextArea.validate();
                    if (rowNum > 4000 || colNum > 2000)
                    {
                        int end = mainTextArea.getLineEndOffset(0);
                        mainTextArea.getDocument().remove(0, end);
                    }
                    //mainTextArea.setCaretPosition(mainTextArea.getDocument().getLength());
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        });
        stopButton.addActionListener(e ->
        {
            if (basicRunner != null)
            {
                Basic i = basicRunner.getOlsenBasic();
                i.runStop();
            }
        });
        runButton.addActionListener(e -> run(false));
        clsButton.addActionListener(e -> cls());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     */
    private void setupUI ()
    {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        final JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 2, 2));
        bottomPanel.setBackground(Color.BLACK);
        bottomPanel.setPreferredSize(new Dimension(600, 34));
        mainPanel.add(bottomPanel, BorderLayout.SOUTH);
        stopButton = new JButton();
        stopButton.setText("Stop");
        stopButton.setPreferredSize(new Dimension(82, 30));
        stopButton.setText("STOP");
        bottomPanel.add(stopButton);
        clsButton = new JButton();
        clsButton.setPreferredSize(new Dimension(82, 30));
        clsButton.setText("CLS");
        bottomPanel.add(clsButton);
        runButton = new JButton();
        runButton.setPreferredSize(new Dimension(82, 30));
        runButton.setText("RUN");
        bottomPanel.add(runButton);
        fontSlider = new JSlider();
        fontSlider.setPreferredSize(new Dimension(200, 30));
        bottomPanel.add(fontSlider);
        caretLabel = new JLabel();
        caretLabel.setPreferredSize(new Dimension(82, 30));
        caretLabel.setForeground(Color.pink);
        bottomPanel.add(caretLabel);
        mainTextArea = new ShellTextComponent(this);
        mainTextArea.setLineWrap(true);
        final JScrollPane scrollPane1 = new JScrollPane(mainTextArea);
        mainPanel.add(scrollPane1, BorderLayout.CENTER);
        mainPanel.setPreferredSize(new Dimension(600, 600));
        createPopupMenu();
    }

    /**
     * Return line at specified position
     *
     * @param linenum Line number
     * @return Line as String
     */
    private String getLineAt (int linenum)
    {
        try
        {
            int start = mainTextArea.getLineStartOffset(linenum);
            int end = mainTextArea.getLineEndOffset(linenum);
            return mainTextArea.getText(start, end - start);
        }
        catch (BadLocationException e)
        {
            return ("");
        }
    }

    private void run (boolean sync)
    {
        basicRunner = new BasicRunner(store.toArray(), this);
        //mainTextArea.setEditable(false);
        //runButton.setEnabled(false);
        basicRunner.start(sync);
        //mainTextArea.setEditable(true);
        //runButton.setEnabled(true);
    }

    /**
     * Wipe text area
     */
    private void cls ()
    {
        synchronized (mainTextArea)
        {
            mainTextArea.setText("");
        }
    }

    private void createPopupMenu ()
    {
        JPopupMenu popup;
        JMenuItem menuItem;
        popup = new JPopupMenu();
        menuItem = new JMenuItem("Background Color");
        menuItem.addActionListener(e ->
        {
            Color c = mainTextArea.getBackground();
            Color nc = JColorChooser.showDialog(null, "Choose background color", c);
            if (nc == null)
            {
                return;
            }
            mainTextArea.setBackground(nc);
            Settings.saveBackgroundColor(nc);
        });
        popup.add(menuItem);
        menuItem = new JMenuItem("Foreground Color");
        menuItem.addActionListener(e ->
        {
            Color c = mainTextArea.getForeground();
            Color nc = JColorChooser.showDialog(null, "Choose text color", c);
            if (nc == null)
            {
                return;
            }
            mainTextArea.setForeground(nc);
            Settings.saveForegroundColor(nc);
        });
        popup.add(menuItem);

        // Add listener to components that can bring up popup menus.
        mainTextArea.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed (MouseEvent e)
            {
                maybeShowPopup(e);
            }

            private void maybeShowPopup (MouseEvent e)
            {
                if (e.isPopupTrigger())
                {
                    popup.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased (MouseEvent e)
            {
                maybeShowPopup(e);
            }
        });
    }

    /**
     * Main thread entry point
     */
    public static void main (String[] unused)
    {
        JFrame frame = new JFrame("Commodore BASIC V2");
        frame.setIconImage(ResourceLoader.getIcon());
        ShellFrame shellFrame = new ShellFrame();
        frame.setContentPane(shellFrame.mainPanel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        shellFrame.putString("     *** COMMODORE BASIC V2 ***\n" + ProgramStore.OK);
        SidRunner.start();

        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run ()
            {
                Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
            }
        });

        while (true)
        {
            try
            {
                shellFrame.commandLoop();
            }
            catch (Exception e)
            {
                e.printStackTrace();
                System.out.println("restarting cmd loop ...");
            }
        }
    }

    /**
     * Send text to text area. Blocks thd caller if buffer is full
     *
     * @param outText
     */
    public void putString (String outText)
    {
        try
        {
            toTextArea.put(outText);
            lastStrLen[0] = lastStrLen[1];
            lastStrLen[1] = outText.length();
        }
        catch (InterruptedException e)
        {
            e.printStackTrace();
        }
    }

    /**
     * Command loop that runs in main thread
     */
    private void commandLoop ()
    {
        System.gc();
        System.runFinalization();
        System.out.println("cmdloop tick");

        String s = getString();
        String[] split = s.split(" ");
        s = s.toLowerCase();
        if (s.equals("list"))
        {
            putString(store.toString());
            putString(ProgramStore.OK);
        }
        else if (s.equals("new"))
        {
            store.clear();
            putString(ProgramStore.OK);
        }
        else if (s.equals("cls"))
        {
            cls();
        }
        else if (s.equals("run"))
        {
            run(true);
        }
        else if (s.equals("dir"))
        {
            dir();
            putString(ProgramStore.OK);
        }
        else if (split[0].toLowerCase().equals("save"))
        {
            String msg = store.save(split[1]);
            putString(msg);
        }
        else if (split[0].toLowerCase().equals("load"))
        {
            String msg = store.load(split[1]);
            putString(msg);
        }
        else
        {
            try
            {
                store.insert(s);
            }
            catch (NumberFormatException unused)
            {
                //putString(ProgramStore.ERROR);
                putString(BasicRunner.runLine(s, this));
            }
        }
    }

    /**
     * Get input from text area. Blocks the caller if there is none
     *
     * @return
     */
    public String getString ()
    {
        try
        {
            return fromTextArea.take().trim();
        }
        catch (InterruptedException e)
        {
            e.printStackTrace();
            return null;
        }
    }

    private void dir ()
    {
        File[] filesInFolder = new File(".").listFiles();
        for (final File fileEntry : filesInFolder)
        {
            if (fileEntry.isFile())
            {
                putStringUCase(fileEntry.getName() +
                        " -- " + fileEntry.length() + '\n');
            }
        }
    }

    public void putStringUCase (String outText)
    {
        putString(outText.toUpperCase());
    }

    public void setBkColor (Color c)
    {
        mainTextArea.setBackground(c);
    }

    public ProgramStore getStore ()
    {
        return store;
    }

    /**
     * Returns length of the output string before the last one
     * Needed by some input statements
     *
     * @return Lengh of penultimate output
     */
    int getPenultimateOutputSize ()
    {
        return lastStrLen[0];
    }

    public boolean peek ()
    {
        return fromTextArea.peek() != null;
    }
}

